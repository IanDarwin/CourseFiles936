#!/bin/sh

# Update and build all repos while online.

# Must run in a git-bash or equivalent real shell environment

# DO NOT RUN mid-week as it will wipe out some or all of the student's work!!!

CN_REV="K.1/904"

# All dirs must be up-to-date:
GIT_DIRS="TicketManorJava CourseFiles936 javasrc jpademo jsfdemo clublist cdi-ee-examples makehandsons createprojects"
# Dirs we have to do "mvn install"
INSTALL_DIRS="TicketManorJava/datamodel makehandsons"
# Dirs to just run "mvn test" in
TEST_DIRS="
	CourseFiles936/sourcecode/donow21solution 
	CourseFiles936/sourcecode/donow31solution 
	CourseFiles936/sourcecode/ex21solution 
	CourseFiles936/sourcecode/ex31solution 
	CourseFiles936/sourcecode/ex41solution 
	CourseFiles936/sourcecode/ex53clientsolution 
	CourseFiles936/sourcecode/ex101solution
	CourseFiles936/sourcecode/minimal
	CourseFiles936/sourcecode/samples
	jpademo"
# Dirs we want to "wildfly:deploy"
MWD_DIRS="CourseFiles936/site
	TicketManorJava/ticketmanor-ee 
	CourseFiles936/sourcecode/ex51solution
	CourseFiles936/sourcecode/ex52solution
	CourseFiles936/sourcecode/ex53serversolution
	CourseFiles936/sourcecode/ex61solution 
	CourseFiles936/sourcecode/ex71solution 
	jsfdemo clublist cdi-ee-examples"
# Dirs we want to "wildfly:deploy" AND run integration tests
MWD_IT_TESTS_DIRS="
	CourseFiles936/sourcecode/ex51solution
	CourseFiles936/sourcecode/ex52solution
	CourseFiles936/sourcecode/ex71solution"

# We undeploy what we deployed at the end, so students can have the fun of deploying it.
# Get list of dirs to either do mvn clean or mvn wildfly:undeploy at end of run
CLEAN_DIRS="jpademo jsfdemo"
UNDEPLOY_DIRS="TicketManorJava/ticketmanor-ee"
for dir in sourcecode/ex*solution; do
	if grep -s wildfly-plugin ${dir}/pom.xml; then
		# Script is run in CourseFiles936 but starts in .. (aka '/'), so prepend
		UNDEPLOY_DIRS="${UNDEPLOY_DIRS} CourseFiles936/${dir}"
	else
		CLEAN_DIRS="${CLEAN_DIRS} CourseFiles936/${dir}"
	fi
done

# These two CD's are intentional, test on Unix, run on Bash-on-Windows.
cd
cd C:/

# Excepting the two CD commands, "none shall fail"
set -e

# Make sure all repos are checked out on this machine
for repo in ${GIT_DIRS}; do
	if [ ! -d $repo ]; then
		echo $0: MISSING $repo; exit 1;
	fi
done

for repo in ${GIT_DIRS}
do
	(
	cd ${repo}
	echo === git pull ${repo} ===
	git pull
	)
done
unset repo

# Install things we need installed
for dir in ${INSTALL_DIRS}
do
	(
	cd ${dir}
	echo === Install ${dir} ===
	mvn -B clean install
	)
done

(
cd CourseFiles936/sourcecode
rm -rf ex??/src/* ex*client/src/* donow??/src/*
../../makehandsons/scripts/makehandsons *solution
)

# Deploy the things that must be deployed;
for dir in ${MWD_DIRS}
do
	(
	cd ${dir}
	echo === Deploy ${dir} ===
	# Build with Maven
	mvn -B clean wildfly:deploy
	)
done
for dir in ${MWD_IT_TESTS_DIRS}
do
	(
	cd ${dir}
	echo === Integration Test ${dir} ===
	# Build with Maven
	mvn -B clean wildfly:deploy verify
	)
done

# Run Maven Test in remaining, which ensures the pre-reqs are present.
for dir in ${TEST_DIRS}
do
	(
	cd ${dir}
	echo === mvn test ${dir} ===
	# Build with Maven
	mvn -B clean test
	)
done

# Now clean up
for dir in ${CLEAN_DIRS}
do
	(
	cd ${dir}
	echo === clean ${dir} ===
	mvn -B clean
	)
done
for dir in ${UNDEPLOY_DIRS}
do
	(
	cd ${dir}
	echo === undeploy ${dir} ===
	mvn -B wildfly:undeploy clean
	)
done

# One last bit for "mvn offline"
echo "Showing dependency tree so dependency plugins available offline..."
(cd ClubList; mvn -B dependency:tree)

# Record the all-in run date as a kind of version control
(echo Version: all-in for Course Notes ${CN_REV} run on date; date) > CourseFiles936/version.html
# And in the about page
(
	echo "<h1>About</h1>"
	echo "<p>These are the Course Files for Course 936, JPA, EJB, JSF, ..."
	echo "<p>To explore the project automation, see the <a href='maint.html'>maint page</a>"
	echo "and the <a href="scripts/all-in">uber script</a>."
	echo "We've tried to make the course load as good as it can be!"
	echo "<table border='1'><tr><td>Course Author:</td><td>Ian Darwin</td></tr>"
	echo "<tr><td>Technical Editor:</td><td>Chris Mawata</td></tr>"
	echo "</table>"
	echo "$0 last run on $(date)"
) > CourseFiles936/about.html

echo "

------------------------- All done! -------------------------

Remember to execute the following steps:
	In Eclipse:
		Window->Show View->Other->Course Maintenance->Create Projects View.
		In Create Projects, do Create All. Wait a while.
		Close the ones that have legit errors (currently ex41 and ex52)
		Close all projects again;
		Close the Create Projects View.
	Close all windows but Chrome; only Home Page showing, centered.
"
