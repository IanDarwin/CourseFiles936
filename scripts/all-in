#!/bin/sh

# Update and build all repos while online.

# Must run in a git-bash or equivalent real shell environment

# DO NOT RUN mid-week as it will wipe out some or all of the student's work!!!

# All dirs must be up-to-date:
GIT_DIRS="TicketManorJava CourseFiles javasrc jpademo jsfdemo clublist makehandsons"
# Dirs we have to do "mvn install"
INSTALL_DIRS="TicketManorJava/datamodel makehandsons"
# Dirs to just run "mvn test" in
TEST_DIRS="CourseFiles/sourcecode/donow31solution 
	CourseFiles/sourcecode/ex21solution 
	CourseFiles/sourcecode/ex31solution 
	CourseFiles/sourcecode/ex41solution 
	CourseFiles/sourcecode/ex53clientsolution 
	jpademo"
# Dirs we want to "wildfly:deploy"
MWD_DIRS="TicketManorJava/ticketmanor-ee 
	CourseFiles/sourcecode/ex51solution
	CourseFiles/sourcecode/ex52solution
	CourseFiles/sourcecode/ex53solution
	CourseFiles/sourcecode/ex61solution 
	CourseFiles/sourcecode/ex71solution 
	jsfdemo clublist"
# Dirs we want to "wildfly:deploy" and run integration tests
MWD_IT_TESTS_DIRS="
	CourseFiles/sourcecode/ex51solution
	CourseFiles/sourcecode/ex52solution
	CourseFiles/sourcecode/ex71solution"
# We undeploy what we deployed at the end, so students can have the fun of deploying it.
UNDEPLOY_DIRS="TicketManorJava/ticketmanor-ee"
for dir in sourcecode/ex*solution; do
	if [ -f ${dir}/pom.xml ]; then
		# Script is run in CourseFiles but starts in .. (aka '/'), so prepend
		UNDEPLOY_DIRS="${UNDEPLOY_DIRS} CourseFiles/${dir}"
	fi
done

# These two CD's are intentional, test on Unix, run on Bash-on-Windows.
cd
cd C:/

# Excepting the two CD commands, nothing else must fail
set -e

for repo in ${GIT_DIRS}
do
	(
	cd ${repo}
	echo === git pull ${repo} ===
	git pull
	)
done
unset repo

# Install things we need installed
for dir in ${INSTALL_DIRS}
do
	(
	cd ${dir}
	echo === Install ${dir} ===
	mvn clean install
	)
done

(
cd CourseFiles/sourcecode
rm -rf ex??/src/* ex*client/src/* donow??/src/*
../../makehandsons/scripts/makehandsons *solution
)

# Deploy the things that must be deployed;
for dir in ${MWD_DIRS}
do
	(
	cd ${dir}
	echo === Deploy ${dir} ===
	# Build with Maven
	mvn clean wildfly:deploy
	)
done
for dir in ${MWD_IT_TESTS_DIRS}
do
	(
	cd ${dir}
	echo === Integration Test ${dir} ===
	# Build with Maven
	mvn verify
	)
done

# Run Maven Test in remaining, which ensures the pre-reqs are present.
for dir in ${TEST_DIRS}
do
	(
	cd ${dir}
	echo === mvn test ${dir} ===
	# Build with Maven
	mvn clean test
	)
done


# Now the cleanup
for dir in ${UNDEPLOY_DIRS}
do
	(
	cd ${dir}
	echo === undeploy ${dir} ===
	mvn wildfly:undeploy clean
	)
done

# One last bit for "mvn offline"
echo "Showing dependency tree so dependency plugins available offline..."
(cd ClubList; mvn dependency:tree)

# Record the all-in run date as a kind of version control
(echo all-in run date; date) > version.html

echo "

------------------------- All done! -------------------------

Rememeber to open all eclipse projects and do Project->Clean->All Projects!
"
